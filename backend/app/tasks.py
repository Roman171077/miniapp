#!/usr/bin/env python3
# bot.py ‚Äî –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –≤ Telegram –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ IRKUTSK

import os
import asyncio
from dotenv import load_dotenv
from datetime import datetime, date, time, timezone
from zoneinfo import ZoneInfo
from telegram import Bot
from app.db import SessionLocal
from app.models import Task

load_dotenv()  # —á–∏—Ç–∞–µ—Ç TELEGRAM_TOKEN –∏ CHAT_ID –∏–∑ .env

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

# –¢–∞–π–º–∑–æ–Ω–∞ –ò—Ä–∫—É—Ç—Å–∫–∞ (UTC+8)
IRKUTSK = ZoneInfo("Asia/Irkutsk")


def format_tasks(tasks: list[Task]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.
    –ï—Å–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ñ–í–í –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã, –ø–µ—Ä–µ–¥ –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞–≤–∏—Ç—Å—è üî¥."""
    blocks = []
    now_local = datetime.now(timezone.utc).astimezone(IRKUTSK)

    for idx, t in enumerate(tasks, start=1):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ IRKUTSK
        planned_utc = (t.planned_start.replace(tzinfo=timezone.utc)
                       if t.planned_start.tzinfo is None else
                       t.planned_start.astimezone(timezone.utc))
        planned_local = planned_utc.astimezone(IRKUTSK)

        due_utc = (t.due_datetime.replace(tzinfo=timezone.utc)
                   if t.due_datetime.tzinfo is None else
                   t.due_datetime.astimezone(timezone.utc))
        due_local = due_utc.astimezone(IRKUTSK)

        address = t.address_raw
        # –ü–æ–º–µ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        start_prefix = "üî¥ " if planned_local < now_local else ""
        due_prefix = "üî¥ " if due_local < now_local else ""

        # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ hh.mm DD.MM.YYYY
        start_str = planned_local.strftime("%H:%M  %d.%m.%Y")
        due_str = due_local.strftime("%H:%M  %d.%m.%Y")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏
        block = [
            f"{idx}.",
            f"–ê–¥—Ä–µ—Å: {address}",
            f"–ù–∞—á–∞–ª–æ: {start_prefix}{start_str}",
            f"–ñ–í–í: {due_prefix}{due_str}",
        ]
        blocks.append("\n".join(block))
    # –†–∞–∑–¥–µ–ª—è–µ–º –±–ª–æ–∫–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    return "\n\n".join(blocks)


async def _send_messages(bot: Bot, messages: list[str]) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Bot.send_message."""
    for msg in messages:
        await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode="Markdown")


def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ –ë–î
    bot = Bot(token=TELEGRAM_TOKEN)
    db = SessionLocal()

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    now_utc = datetime.now(timezone.utc)

    # 1) –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    overdue = (
        db.query(Task)
          .filter(Task.status != 'done', Task.status != 'cancelled', Task.due_datetime < now_utc)
          .all()
    )
    if overdue:
        text1 = "üìå *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n" + format_tasks(overdue)
    else:
        text1 = "‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."

    # 2) –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ IRKUTSK)
    today_local = datetime.now(IRKUTSK).date()
    start_local = datetime.combine(today_local, time.min, tzinfo=IRKUTSK)
    end_local = datetime.combine(today_local, time.max, tzinfo=IRKUTSK)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    start_utc = start_local.astimezone(timezone.utc)
    end_utc = end_local.astimezone(timezone.utc)

    todays = (
        db.query(Task)
          .filter(Task.status != 'done',
                  Task.planned_start >= start_utc,
                  Task.planned_start <= end_utc)
          .all()
    )
    if todays:
        text2 = "üóì *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n" + format_tasks(todays)
    else:
        text2 = "üéâ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

    db.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    asyncio.run(_send_messages(bot, [text1, text2]))


if __name__ == "__main__":
    main()

