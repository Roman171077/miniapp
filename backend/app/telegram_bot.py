import os
from dotenv import load_dotenv
import requests
import logging
from typing import Optional
from datetime import datetime
from app import models  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π TelegramMessage
from app.db import SessionLocal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_TOKEN or not CHAT_ID or not YANDEX_API_KEY:
    raise ValueError("–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_to_telegram(message: str) -> Optional[str]:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π CHAT_ID
        "text": message,
        "parse_mode": "Markdown"
    }

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        response = requests.post(url, data=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        response_data = response.json()
        telegram_message_id = response_data['result']['message_id']  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_message = models.TelegramMessage(
            chat_id=CHAT_ID,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            message_text=message,
            telegram_message_id=str(telegram_message_id)
        )
        db.add(db_message)
        db.commit()
        db.refresh(db_message)

        return str(telegram_message_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    except requests.exceptions.RequestException as e:
        logging.error(f"Error sending message to Telegram: {e}")
        return None

    finally:
        db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
def send_session_info(session_id: int, entry_time: datetime, exit_time: datetime, zone_name: str, time_spent: float):
    message = (
        f"üöó **–°–µ—Å—Å–∏—è {session_id}**\n"
        f"–ó–æ–Ω–∞: {zone_name}\n"
        f"–í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {entry_time}\n"
        f"–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞: {exit_time}\n"
        f"–í—Ä–µ–º—è –≤ –∑–æ–Ω–µ: {time_spent:.2f} –º–∏–Ω—É—Ç."
    )
    send_to_telegram(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ
def send_task_info(task_id: int, address: str, arrival_time: datetime, departure_time: datetime, time_spent: float, confidence: float):
    message = (
        f"üìù **–ó–∞–¥–∞—á–∞ {task_id}**\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_time}\n"
        f"–í—Ä–µ–º—è —É–±—ã—Ç–∏—è: {departure_time}\n"
        f"–í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á–µ: {time_spent:.2f} –º–∏–Ω—É—Ç\n"
        f"–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {confidence}%"
    )
    send_to_telegram(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
def send_stop_info(stop_id: int, start_time: datetime, end_time: datetime, duration: float, coordinates: tuple):
    message = (
        f"‚è± **–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {stop_id}**\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} –º–∏–Ω—É—Ç\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}"
    )
    send_to_telegram(message)

def delete_telegram_message(telegram_message_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ Telegram –ø–æ message_id"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage"
    payload = {
        "chat_id": CHAT_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π CHAT_ID
        "message_id": telegram_message_id
    }
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logging.error(f"Error deleting message from Telegram: {e}")
        return False
