# app/zone_processor.py

import math
import logging
from datetime import timezone
from zoneinfo import ZoneInfo
from sqlalchemy.orm import Session

from app.models import BeaconCoordinate, GeoZone
import app.crud as crud
from app.schemas import GeozoneSessionCreate
from app.visit_analysis import analyze_session
from app.detect_stops import detect_stops
from app.telegram_bot import send_to_telegram

logger = logging.getLogger(__name__)
IRKUTSK = ZoneInfo('Asia/Irkutsk')


def haversine(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    R = 6371000.0
    œÜ1, œÜ2 = math.radians(lat1), math.radians(lat2)
    dœÜ = math.radians(lat2 - lat1)
    dŒª = math.radians(lon2 - lon1)
    a = math.sin(dœÜ/2)**2 + math.cos(œÜ1)*math.cos(œÜ2)*math.sin(dŒª/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))


class ZoneStateMachine:
    def __init__(self, db: Session, initial_point: BeaconCoordinate = None):
        self.db = db
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã
        zones = db.query(GeoZone).all()
        self.zone_defs = [
            (z.zone_id, z.name, z.center_lat, z.center_lon, z.radius_m, z.type)
            for z in zones
        ]

        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = 'travel'
        self.zone_session_id = None
        self.zone_type = None

        # –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.zone_name = None
        self.zone_entry_time = None

        # –±—É—Ñ–µ—Ä —Ç–æ—á–µ–∫ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        self.buffer: list[BeaconCoordinate] = []

        # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if initial_point:
            found = self._find_zone(initial_point)
            if found:
                self._enter_zone(found, initial_point, init=True)
            else:
                self.buffer = [initial_point]

    def _find_zone(self, pt: BeaconCoordinate):
        for zid, name, cz_lat, cz_lon, cz_r, ztype in self.zone_defs:
            if haversine(pt.latitude, pt.longitude, cz_lat, cz_lon) <= cz_r:
                return zid, name, cz_lat, cz_lon, cz_r, ztype
        return None

    def _enter_zone(self, found, pt: BeaconCoordinate, init=False):
        zid, zname, *_ , ztype = found
        t = pt.recorded_at

        # —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        sess = crud.create_geozone_session(
            self.db,
            GeozoneSessionCreate(
                zone_id=zid,
                entry_time=t,
                exit_time=None,
                entry_lat=pt.latitude,
                entry_lon=pt.longitude,
                exit_lat=None,
                exit_lon=None,
                status='open'
            )
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∑–æ–Ω—ã –∏ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.zone_name = zname
        self.zone_entry_time = t
        self.zone_session_id = sess.session_id
        self.zone_type = ztype
        self.state = 'zone'
        self.buffer.clear()

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        send_to_telegram(
            f"üöó –í—ä–µ–∑–¥ –≤ –∑–æ–Ω—É ¬´{zname}¬ª –≤ {t.astimezone(IRKUTSK).strftime('%Y-%m-%d %H:%M:%S')}"
        )

    def _exit_zone(self, pt: BeaconCoordinate):
        t = pt.recorded_at

        # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –¥–µ–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑
        if self.zone_type == 'territory' and self.zone_session_id:
            crud.close_geozone_session(
                self.db,
                session_id=self.zone_session_id,
                exit_time=t,
                exit_lat=pt.latitude,
                exit_lon=pt.longitude
            )
            analyze_session(self.db, self.zone_session_id)

        # —Å—á–∏—Ç–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        duration = 0
        if self.zone_entry_time:
            duration = int((t - self.zone_entry_time).total_seconds() / 60)

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–æ–Ω—ã –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        send_to_telegram(
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–µ—Ö–∞–ª –∏–∑ –∑–æ–Ω—ã ¬´{self.zone_name}¬ª –≤ "
            f"{t.astimezone(IRKUTSK).strftime('%Y-%m-%d %H:%M:%S')}, "
            f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω."
        )

        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ¬´–¥–≤–∏–∂–µ–Ω–∏–µ¬ª
        self.state = 'travel'
        self.buffer = [pt]
        self.zone_session_id = None
        self.zone_type = None
        self.zone_name = None
        self.zone_entry_time = None

    def process_point(self, pt: BeaconCoordinate):
        current = self._find_zone(pt)
        try:
            # –≤—ã—Ö–æ–¥ –∏–∑ –∑–æ–Ω—ã
            if self.state == 'zone' and not current:
                self._exit_zone(pt)
                return

            # –≤—ä–µ–∑–¥ –≤ –∑–æ–Ω—É
            if self.state == 'travel' and current:
                # —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—É—Ç–∏
                detect_stops(self.buffer + [pt])
                self._enter_zone(current, pt)
                return

            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –±—É—Ñ–µ—Ä–∏–∑—É–µ–º
            if self.state == 'travel':
                self.buffer.append(pt)
                return

            # –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω—ã –±–µ–∑ –≤—ã—Ö–æ–¥–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        except Exception as err:
            logger.error("‚ùå Error in state transition: %s", err, exc_info=True)
            self.db.rollback()

    def finalize(self):
        # –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–∞—Ç—á–∞ –Ω—É–∂–Ω–æ —Ç–æ–∂–µ –∑–∞–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –∑–æ–Ω—É –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—É—Ç—å
        if self.state == 'zone' and self.zone_type == 'territory' and self.zone_session_id:
            last = self.db.query(BeaconCoordinate) \
                          .order_by(BeaconCoordinate.recorded_at.desc()) \
                          .first()
            if last:
                self._exit_zone(last)

        elif self.state == 'travel' and self.buffer:
            detect_stops(self.buffer)
