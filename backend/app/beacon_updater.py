# app/beacon_updater.py ‚Äî –æ–ø—Ä–æ—Å –º–∞—è–∫–∞, –∑–∞–ø–∏—Å—å –≤ UTC, –ª–æ–≥ –≤ IRKUTSK + —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à –¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–¥–∞—á

import os
import logging
from pathlib import Path
from datetime import datetime, timedelta, timezone, time
import zoneinfo

import requests
from dotenv import load_dotenv
from sqlalchemy.orm import Session
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger

from get_app_code import get_app_code
from get_app_token import get_app_token
from get_slid_user_token import get_slid_user_token
from get_slnet_token import get_slnet_token
from get_user_id import get_user_id

from app.db import SessionLocal
from app.crud import create_beacon_coordinate
from app.schemas import BeaconCoordinateCreate
from app.analytics_stream import rt_processor
from app.telegram_bot import send_to_telegram
# –ù–æ–≤–∞—è –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
from app.tasks import main as send_task_report

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s %(levelname)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–∞–π–º–∑–æ–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
IRKUTSK = zoneinfo.ZoneInfo("Asia/Irkutsk")

BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / ".env")

SL_APP_ID     = os.getenv("SL_APP_ID")
SL_APP_SECRET = os.getenv("SL_APP_SECRET")
SL_LOGIN      = os.getenv("SL_LOGIN")
SL_PASSWORD   = os.getenv("SL_PASSWORD")

if not all([SL_APP_ID, SL_APP_SECRET, SL_LOGIN, SL_PASSWORD]):
    raise RuntimeError(f"–í {BASE_DIR/'.env'} –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å SL_APP_ID, SL_APP_SECRET, SL_LOGIN –∏ SL_PASSWORD")

# –ö—ç—à —Ç–æ–∫–µ–Ω–∞
_token_cache = {
    "slnet_token": None,
    "user_id":     None,
    "expires_at":  datetime.now(IRKUTSK)
}

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
_last_work_date = None
_last_run_time  = None


def authorise_full() -> tuple[str, str]:
    code        = get_app_code(SL_APP_ID, SL_APP_SECRET)
    app_token   = get_app_token(SL_APP_ID, SL_APP_SECRET, code)
    slid_token  = get_slid_user_token(app_token, SL_LOGIN, SL_PASSWORD)
    slnet_token = get_slnet_token(slid_token)
    user_id     = get_user_id(slid_token)
    return slnet_token, user_id


def authorise_cached() -> tuple[str, str]:
    now = datetime.now(IRKUTSK)
    if _token_cache["slnet_token"] and now < _token_cache["expires_at"]:
        return _token_cache["slnet_token"], _token_cache["user_id"]
    slnet_token, user_id = authorise_full()
    _token_cache.update({
        "slnet_token": slnet_token,
        "user_id":     user_id,
        "expires_at":  now + timedelta(hours=24)
    })
    logger.info("üîë –ù–æ–≤—ã–π slnet_token –¥–æ %s", _token_cache["expires_at"].isoformat())
    return slnet_token, user_id


def fetch_coordinates() -> tuple[float, float, int]:
    slnet_token, user_id = authorise_cached()
    url = f"https://developer.starline.ru/json/v2/user/{user_id}/user_info"
    resp = requests.get(url, headers={"Cookie": f"slnet={slnet_token}"}, timeout=10)
    resp.raise_for_status()
    payload = resp.json()
    devices = payload.get("devices") or []
    if not devices:
        raise RuntimeError("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    pos = devices[0].get("position", {})
    lon, lat, ts = pos.get("y"), pos.get("x"), pos.get("ts")
    if None in (lat, lon, ts):
        raise RuntimeError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {pos}")
    return lat, lon, ts


def record_beacon_coordinate() -> None:
    global _last_work_date, _last_run_time

    now_local = datetime.now(IRKUTSK)

    try:
        # 1) –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat, lon, ts_dev = fetch_coordinates()
        dt_utc   = datetime.fromtimestamp(ts_dev, tz=timezone.utc)
        dt_local = dt_utc.astimezone(IRKUTSK)

        today = dt_local.date()
        # –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        start_thresh = datetime.combine(today, time(8, 0), tzinfo=IRKUTSK)
        end_thresh   = datetime.combine(today, time(21, 59), tzinfo=IRKUTSK)

        # 2) –°—Ç–∞—Ä—Ç –¥–Ω—è: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ 08:00
        if (_last_run_time is None or _last_run_time < start_thresh) \
           and dt_local >= start_thresh \
           and _last_work_date != today:

            _last_work_date = today
            found = rt_processor._find_zone(BeaconCoordinateCreate(
                latitude=lat, longitude=lon, recorded_at=dt_utc
            ))
            if found:
                send_to_telegram(f"üîî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∑–æ–Ω–µ ¬´{found[1]}¬ª")
            else:
                send_to_telegram("üîî –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –ø—É—Ç–∏")

            # –ü–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º
            try:
                send_task_report()
            except Exception as err:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º: %s", err, exc_info=True)

        # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        coord_in = BeaconCoordinateCreate(
            latitude=lat, longitude=lon, recorded_at=dt_utc
        )
        db: Session = SessionLocal()
        try:
            db_coord = create_beacon_coordinate(db, coord_in)
        finally:
            db.close()
        logger.info("‚úÖ [%s] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: device_time=%s, lat=%.6f, lon=%.6f",
                    now_local.isoformat(), dt_local.isoformat(), lat, lon)

        # 4) Real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤—ä–µ–∑–¥/–≤—ã–µ–∑–¥/—Å—Ç–æ–ø—ã)
        try:
            rt_processor.process(db_coord)
        except Exception as err:
            logger.error("‚ùå [RT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s", err, exc_info=True)

        # 5) –§–∏–Ω–∏—à –¥–Ω—è: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ 21:59
        if (_last_run_time is None or _last_run_time < end_thresh) \
           and dt_local >= end_thresh:

            found = rt_processor._find_zone(db_coord)
            if found:
                send_to_telegram(f"üîî –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å –≤ –∑–æ–Ω–µ ¬´{found[1]}¬ª")
            else:
                send_to_telegram("üîî –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å –≤ –ø—É—Ç–∏")

        # 6) –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        _last_run_time = dt_local

    except Exception as e:
        logger.error("‚ùå [%s] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %s", now_local.isoformat(), e, exc_info=True)


if __name__ == "__main__":
    scheduler = BlockingScheduler(timezone=IRKUTSK)
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å 00:00 –¥–æ 21:59 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    trigger   = CronTrigger(minute="*", hour="8-21", timezone=IRKUTSK)
    scheduler.add_job(record_beacon_coordinate, trigger, id="beacon_log")
    logger.info("üïë –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: –∑–∞–ø–∏—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (08‚Äì22 Irkutsk)")
    try:
        scheduler.start()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å‚Ä¶")

